{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Scores.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Alert","props","children","Scores","score","topScore","Game","handleItemClick","id","console","log","correctlyGuessed","newData","state","data","map","item","newItem","clicked","setState","randomize","bind","this","i","length","j","Math","floor","random","temp","items","key","src","image","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"glCAaeA,MARf,WACI,OACI,yBAAKC,UAAU,UAAf,gB,MCWOC,MAdf,SAAeC,GACX,OAII,yBAAKF,UAAU,eAGVE,EAAMC,W,MCMJC,MAbf,SAAgBF,GACZ,OACI,yBAAKF,UAAU,gBACX,8CACHE,EAAMG,OAEH,4CACKH,EAAMI,Y,OCwFRC,G,kBA5FX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KAYVM,gBAAkB,SAAAC,GACdC,QAAQC,IAAIF,GACZ,IAAIG,GAAmB,EACjBC,EAAU,EAAKC,MAAMC,KAAKC,KAAI,SAAAC,GAGhC,IAAMC,EAAO,eAAQD,GAKrB,OAJIC,EAAQT,KAAOA,GAAOS,EAAQC,UAC9BD,EAAQC,SAAU,EAClBP,GAAmB,GAEhBM,KAGXR,QAAQC,IAAIC,GACRA,EAGA,EAAKQ,SAAS,CACVf,MAAO,EAAKS,MAAMT,MAAQ,EAC1BU,KAAM,EAAKM,UAAUR,KAOrB,EAAKC,MAAMT,MAAQ,EAAKS,MAAMR,SAC9B,EAAKc,SAAS,CACVd,SAAU,EAAKQ,MAAMT,MACrBA,MAAO,EACPU,KAAM,EAAKM,UAAU,EAAKP,MAAMC,QAGpC,EAAKK,SAAS,CACVf,MAAO,EACPU,KAAM,EAAKM,UAAU,EAAKP,MAAMC,SA/C5C,EAAKD,MAAQ,CACTC,OACAV,MAAO,EACPC,SAAU,GAEd,EAAKE,gBAAkB,EAAKA,gBAAgBc,KAArB,gBAPR,E,iFAUfC,KAAKH,SAAS,CAAEL,KAAMQ,KAAKF,UAAUE,KAAKT,MAAMC,U,gCAiD1CA,GAEN,IADA,IAAIS,EAAIT,EAAKU,OAAS,EACfD,EAAI,GAAG,CACV,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOf,EAAKS,GAClBT,EAAKS,GAAKT,EAAKW,GACfX,EAAKW,GAAKI,EACVN,IAEJ,OAAOT,I,+BAID,IAAD,OACCgB,EAAQR,KAAKT,MAAMC,KAAKC,KAAI,SAAAC,GAAI,OAClC,yBAAKjB,UAAU,eAAegC,IAAKf,EAAKR,GAAIA,GAAIQ,EAAKR,GAAIwB,IAAKhB,EAAKiB,MAAOC,QAAS,kBAAM,EAAK3B,gBAAgBS,EAAKR,UAEvH,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQJ,MAAOkB,KAAKT,MAAMT,QAC1B,6BACK0B,S,GAnFNK,cCQJC,MATf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAE,EAAF,QCGcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d32aef07.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/Navbar.css\";\r\n\r\n\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"navbar\">\r\n            MEMORY GAME\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./styles/Alert.css\";\r\n\r\n\r\nfunction Alert(props) {\r\n    return (\r\n\r\n            // Click on an image to earn points, but don't click on any more than once!\r\n\r\n        <div className=\"alert-style\">\r\n            \r\n            \r\n            {props.children}\r\n        </div>\r\n\r\n            );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport \"./styles/Scores.css\";\r\n\r\n\r\n\r\nfunction Scores(props) {\r\n    return (\r\n        <div className=\"scores-style\">\r\n            <div>Current Score:\r\n        {props.score}\r\n            </div>\r\n            <div>Total Score:\r\n                {props.topScore}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scores;\r\n","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Alert from './Alert';\r\nimport Scores from './Scores';\r\nimport data from '../data.json';\r\nimport \"./styles/Squares.css\";\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data,\r\n            score: 0,\r\n            topScore: 0\r\n        }\r\n        this.handleItemClick = this.handleItemClick.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ data: this.randomize(this.state.data) });\r\n    }\r\n\r\n    handleItemClick = id => {\r\n        console.log(id);\r\n        let correctlyGuessed = false;\r\n        const newData = this.state.data.map(item => {\r\n            // Test & see if ID is clicked or not\r\n\r\n            const newItem = { ...item }\r\n            if (newItem.id === id && !newItem.clicked) {\r\n                newItem.clicked = true;\r\n                correctlyGuessed = true;\r\n            }\r\n            return newItem;\r\n        })\r\n\r\n        console.log(correctlyGuessed);\r\n        if (correctlyGuessed) {\r\n            // here update new score\r\n\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                data: this.randomize(newData)\r\n            })\r\n\r\n            // reshuffle data\r\n\r\n\r\n        } else {\r\n            if (this.state.score > this.state.topScore) {\r\n                this.setState({\r\n                    topScore: this.state.score,\r\n                    score: 0,\r\n                    data: this.randomize(this.state.data)\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    score: 0,\r\n                    data: this.randomize(this.state.data)\r\n                })\r\n            }\r\n            // set score to 0\r\n\r\n            // reset data (all click events set to false)\r\n            // re randomize the data\r\n        }\r\n    }\r\n\r\n    randomize(data) {\r\n        let i = data.length - 1;\r\n        while (i > 0) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = data[i];\r\n            data[i] = data[j];\r\n            data[j] = temp;\r\n            i--;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    // add class to img key, connect css file to this game js file\r\n    render() {\r\n        const items = this.state.data.map(item => (\r\n            <img className=\"square-style\" key={item.id} id={item.id} src={item.image} onClick={() => this.handleItemClick(item.id)} ></img>\r\n        ));\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <Alert>\r\n                    <Scores score={this.state.score} />\r\n                    <div>\r\n                        {items}\r\n                    </div>\r\n                </ Alert>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport './App.css';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      < Game />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}